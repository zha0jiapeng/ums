pipeline {
    agent any
    
    environment {
        PROJECT_NAME = 'ums-server'
        VERSION = '2.0'
        DOCKER_IMAGE = 'ums-server:2.0'
        DEPLOY_PATH = '/opt/ums-server'
        // 本地代码路径，避免网络连接问题
        LOCAL_CODE_PATH = '/opt/ums-server-code'
    }
    
    stages {
        stage('准备本地代码') {
            steps {
                script {
                    // 检查本地代码目录是否存在
                    if (!fileExists(LOCAL_CODE_PATH)) {
                        error "本地代码目录不存在: ${LOCAL_CODE_PATH}"
                    }
                    
                    // 复制本地代码到工作空间
                    sh """
                        echo "复制本地代码到工作空间..."
                        cp -r ${LOCAL_CODE_PATH}/* .
                        ls -la
                    """
                    
                    echo "本地代码准备完成"
                }
            }
        }
        
        stage('Maven构建') {
            steps {
                script {
                    // 检查Maven是否可用
                    sh 'mvn --version'
                    
                    // 执行Maven构建
                    sh 'mvn clean package -DskipTests'
                    
                    // 归档构建产物
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    
                    echo "Maven构建完成"
                }
            }
        }
        
        stage('Docker构建') {
            steps {
                script {
                    // 重命名JAR文件以匹配Dockerfile中的名称
                    sh 'cp target/ums-0.0.1-SNAPSHOT.jar ums-0.0.1-SNAPSHOT.jar'
                    
                    // 构建Docker镜像
                    docker.build(DOCKER_IMAGE)
                    
                    echo "Docker镜像构建完成"
                }
            }
        }
        
        stage('Docker Compose部署') {
            steps {
                script {
                    // 使用docker-compose进行部署
                    sh """
                        echo "开始部署..."
                        
                        # 停止现有服务
                        docker-compose down || true
                        
                        # 清理旧镜像（可选）
                        docker image prune -f || true
                        
                        # 启动所有服务（包括MySQL、Redis和应用）
                        docker-compose up -d
                        
                        # 等待服务启动
                        echo "等待服务启动..."
                        sleep 30
                        
                        # 检查服务状态
                        docker-compose ps
                    """
                }
            }
        }
        
        stage('健康检查') {
            steps {
                script {
                    // 等待应用启动
                    sh 'sleep 60'
                    
                    // 检查应用健康状态
                    sh """
                        echo "执行健康检查..."
                        
                        # 检查容器状态
                        echo "容器状态："
                        docker ps | grep ums-server || echo "未找到ums-server容器"
                        
                        # 检查应用端口
                        echo "应用健康检查："
                        curl -f http://localhost:38080/actuator/health || echo "健康检查失败"
                        
                        # 检查数据库连接
                        echo "数据库连接检查："
                        docker exec ums-mysql mysql -uroot -pfbmMTEz7TuHx -e "SELECT 1;" || echo "数据库连接失败"
                        
                        # 检查Redis连接
                        echo "Redis连接检查："
                        docker exec ums-redis redis-cli ping || echo "Redis连接失败"
                    """
                }
            }
        }
        
        stage('部署验证') {
            steps {
                script {
                    // 验证部署结果
                    sh """
                        echo "验证部署结果..."
                        
                        # 检查服务端口
                        netstat -tlnp | grep 38080 || echo "应用端口未监听"
                        netstat -tlnp | grep 33306 || echo "MySQL端口未监听"
                        netstat -tlnp | grep 36379 || echo "Redis端口未监听"
                        
                        # 检查应用日志
                        echo "应用日志（最近10行）："
                        docker-compose logs --tail=10 ums-app || echo "无法获取应用日志"
                    """
                }
            }
        }
    }
    
    post {
        always {
            // 清理工作空间
            cleanWs()
            
            // 显示最终状态
            script {
                sh """
                    echo "=== 部署状态 ==="
                    docker-compose ps
                    echo "=== 服务地址 ==="
                    echo "应用地址: http://localhost:38080"
                    echo "MySQL地址: localhost:33306"
                    echo "Redis地址: localhost:36379"
                """
            }
        }
        success {
            echo "🎉 部署成功！"
            echo "应用运行在 http://localhost:38080"
            echo "MySQL运行在 localhost:33306"
            echo "Redis运行在 localhost:36379"
        }
        failure {
            echo "❌ 部署失败！"
            script {
                // 显示详细错误信息
                sh """
                    echo "=== 错误诊断 ==="
                    echo "容器状态："
                    docker-compose ps
                    echo "应用日志："
                    docker-compose logs ums-app || echo "无法获取应用日志"
                    echo "MySQL日志："
                    docker-compose logs mysql || echo "无法获取MySQL日志"
                    echo "Redis日志："
                    docker-compose logs redis || echo "无法获取Redis日志"
                """
            }
        }
        cleanup {
            // 清理临时文件
            sh 'rm -f ums-0.0.1-SNAPSHOT.jar || true'
        }
    }
} 