pipeline {
    agent any
    
    environment {
        PROJECT_NAME = 'ums-server'
        VERSION = '2.0'
        DOCKER_IMAGE = 'ums-server:2.0'
        DEPLOY_PATH = '/opt/ums-server'
    }
    
    stages {
        stage('代码检出') {
            steps {
                // 使用SSH URL进行代码检出
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        url: 'git@github.com:zha0jiapeng/ums.git',
                        credentialsId: '189cebf6-f7d5-49a5-a8a6-3bd7b8e2d90b'  // 需要在Jenkins中配置SSH凭据
                    ]]
                ])
                echo "代码检出完成"
            }
        }
        
        stage('Maven构建') {
            steps {
                sh 'mvn clean package -DskipTests'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
        
        stage('Docker构建') {
            steps {
                script {
                    // 重命名JAR文件以匹配Dockerfile中的名称
                    sh 'cp target/ums-0.0.1-SNAPSHOT.jar ums-0.0.1-SNAPSHOT.jar'
                    
                    // 构建Docker镜像
                    docker.build(DOCKER_IMAGE)
                }
            }
        }
        
        stage('Docker Compose部署') {
            steps {
                script {
                    // 使用docker-compose进行部署
                    sh """
                        # 停止现有服务
                        docker-compose down || true
                        
                        # 启动所有服务（包括MySQL、Redis和应用）
                        docker-compose up -d
                        
                        # 等待服务启动
                        sleep 30
                        
                        # 检查服务状态
                        docker-compose ps
                    """
                }
            }
        }
        
        stage('健康检查') {
            steps {
                script {
                    // 等待应用启动
                    sh 'sleep 60'
                    
                    // 检查应用健康状态
                    sh """
                        # 检查容器状态
                        docker ps | grep ums-server
                        
                        # 检查应用端口
                        curl -f http://localhost:38080/actuator/health || echo "健康检查失败"
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "部署成功！应用运行在 http://localhost:38080"
        }
        failure {
            echo "部署失败！"
            script {
                // 显示容器日志以便调试
                sh 'docker-compose logs ums-app || true'
            }
        }
    }
} 