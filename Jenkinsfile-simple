pipeline {
    agent any
    
    environment {
        PROJECT_NAME = 'ums-server'
        VERSION = '2.0'
        DOCKER_IMAGE = 'ums-server:2.0'
        LOCAL_CODE_PATH = '/opt/ums-server-code'
    }
    
    stages {
        stage('Prepare Local Code') {
            steps {
                script {
                    // 检查本地代码目录
                    if (!fileExists(LOCAL_CODE_PATH)) {
                        error "Local code directory does not exist: ${LOCAL_CODE_PATH}"
                    }
                    
                    // 复制本地代码到工作空间
                    sh """
                        echo "Copying local code to workspace..."
                        cp -r ${LOCAL_CODE_PATH}/* .
                        echo "Files in workspace:"
                        ls -la
                    """
                    
                    echo "Local code preparation completed"
                }
            }
        }
        
        stage('Maven Build') {
            steps {
                script {
                    // 检查Maven是否可用
                    sh 'mvn --version'
                    
                    // 执行Maven构建
                    sh 'mvn clean package -DskipTests'
                    
                    // 归档构建产物
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    
                    echo "Maven build completed"
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    // 重命名JAR文件
                    sh 'cp target/ums-0.0.1-SNAPSHOT.jar ums-0.0.1-SNAPSHOT.jar'
                    
                    // 构建Docker镜像
                    docker.build(DOCKER_IMAGE)
                    
                    echo "Docker image built successfully"
                }
            }
        }
        
        stage('Docker Compose Deploy') {
            steps {
                script {
                    // 部署应用
                    sh """
                        echo "Starting deployment..."
                        
                        # 停止现有服务
                        docker-compose down || true
                        
                        # 启动所有服务
                        docker-compose up -d
                        
                        # 等待服务启动
                        echo "Waiting for services to start..."
                        sleep 30
                        
                        # 检查服务状态
                        echo "Service status:"
                        docker-compose ps
                    """
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    // 等待应用完全启动
                    sh 'sleep 60'
                    
                    // 执行健康检查
                    sh """
                        echo "Performing health checks..."
                        
                        # 检查容器状态
                        echo "Container status:"
                        docker ps | grep ums-server || echo "UMS server container not found"
                        
                        # 检查应用健康状态
                        echo "Application health check:"
                        curl -f http://localhost:38080/actuator/health || echo "Health check failed"
                        
                        # 检查数据库连接
                        echo "Database connection check:"
                        docker exec ums-mysql mysql -uroot -pfbmMTEz7TuHx -e "SELECT 1;" || echo "Database connection failed"
                        
                        # 检查Redis连接
                        echo "Redis connection check:"
                        docker exec ums-redis redis-cli ping || echo "Redis connection failed"
                    """
                }
            }
        }
    }
    
    post {
        always {
            // 清理工作空间
            cleanWs()
            
            // 显示最终状态
            script {
                sh """
                    echo "=== Final Status ==="
                    docker-compose ps
                    echo "=== Service URLs ==="
                    echo "Application: http://localhost:38080"
                    echo "MySQL: localhost:33306"
                    echo "Redis: localhost:36379"
                """
            }
        }
        success {
            echo "🎉 Deployment successful!"
            echo "Application is running at http://localhost:38080"
            echo "MySQL is running at localhost:33306"
            echo "Redis is running at localhost:36379"
        }
        failure {
            echo "❌ Deployment failed!"
            script {
                // 显示详细错误信息
                sh """
                    echo "=== Error Diagnosis ==="
                    echo "Container status:"
                    docker-compose ps
                    echo "Application logs:"
                    docker-compose logs ums-app || echo "Cannot get application logs"
                    echo "MySQL logs:"
                    docker-compose logs mysql || echo "Cannot get MySQL logs"
                    echo "Redis logs:"
                    docker-compose logs redis || echo "Cannot get Redis logs"
                """
            }
        }
        cleanup {
            // 清理临时文件
            sh 'rm -f ums-0.0.1-SNAPSHOT.jar || true'
        }
    }
} 